%{
    /* definitions */
    #include <stdio.h>
    #include <stdlib.h>
    #include "calc.tab.h"

    extern int yylex(void);
    extern int yyerror(const char *s);

    
typedef struct {
    char* name;
    int value;
} Variable;

Variable variables[10];
int var_count = 0;

void assign_variable(char* name, int value);
int variable_value(char* name);

%}

%union {
    int num;
    char* sym;
}

%token EOL
%token<num> NUMBER
%type<num> exp
%token<sym> VARIABLE

%left '+' '-'
%left '*' '/'
%right '='

%%

input:
      exp EOL { printf("Result: %d\n", $1); }
    | input exp EOL { printf("Result: %d\n", $2); }  
    | exp ';' EOL { printf("Result: %d\n", $1); }
    | input exp ';' EOL { printf("Result: %d\n", $2); }
    | VARIABLE '=' exp EOL { assign_variable($1, $3); }
    | input VARIABLE '=' exp EOL { assign_variable($2, $4); }
    ;

exp:
    NUMBER { $$ = $1; }
    | exp '+' exp { $$ = $1 + $3; }
    | exp '-' exp { $$ = $1 - $3; }
    | exp '*' exp { $$ = $1 * $3; }
    | exp '/' exp { $$ = $1 / $3; }
    | '(' exp ')' { $$ = $2; }
    //| VARIABLE '+' VARIABLE { $$ = variable_value($1) + variable_value($3); }
    ;

%%

void assign_variable (char* name, int value) {
    for (int i = 0; i < var_count; i++) {
        if (variables[i].name == name) {
            variables[i].value = value;
        }
    }
    variables[var_count].name = name;
    variables[var_count].value = value;
    var_count++;
}

int variable_value (char* name) {
    for (int i = 0; i < var_count; i++) {
        if (variables[i].name == name) {
            return variables[i].value;
        }
    }
    yyerror(name);
}

int yyerror(const char *s) {
    fprintf(stderr, "ERROR: %s\n", s);
    return 0;
}

int main() {
    printf("Enter math:\n");
    return yyparse();
}

yyerror(char* s) {
    printf("ERROR: %s\n", s);
    return 0;
}
