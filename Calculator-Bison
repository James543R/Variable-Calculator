%{
    /* definitions */
    #include <stdio.h>
    #include <stdlib.h>
    #include "calc.tab.h"
    #include <string.h>

    extern int yylex(void);
    extern int yyerror(const char *s);
    
    typedef struct {
        char* name;
        double value;
    } Variable;

    Variable variables[100];
    int var_count = 0;

    void assign_variable(char* name, double value);
    double variable_value(char* name);

%}

%union {
    double num;
    char* sym;
}

%token EOL
%token<num> NUMBER
%type<num> exp
%token<sym> VARIABLE
%type<num> line
%token PRINT

%right '='
%left '+' '-'
%left '*' '/'


%%

input:
    | input line
    ;

line:
    exp EOL
    | exp ';' { $$ = $1; }
    ;

exp:
    NUMBER { $$ = $1; }
    | exp '+' exp { $$ = $1 + $3; printf("Result: %g\n", $$); }
    | exp '-' exp { $$ = $1 - $3; printf("Result: %g\n", $$); }
    | exp '*' exp { $$ = $1 * $3; printf("Result: %g\n", $$); }
    | exp '/' exp { $$ = $1 / $3; printf("Result: %g\n", $$); }
    | '(' exp ')' { $$ = $2; }
    | VARIABLE '=' exp { $$ = $3; assign_variable($1, $3); printf("New assignment: %s = %g\n", $1, $3); }
    | VARIABLE '=' exp ';' { $$ = $3; assign_variable($1, $3); }
    | VARIABLE { $$ = variable_value($1); }
    | PRINT VARIABLE { printf("Result: %s = %g\n", $2, variable_value($2)); }
    ;

%%

void assign_variable (char* name, double value) {
    for (int i = 0; i < var_count; i++) {
        if (strcmp(variables[i].name, name) == 0) {
            variables[i].value = value;
            return;
        }
    }
    variables[var_count].name = name;
    variables[var_count].value = value;
    var_count++;
}

double variable_value (char* name) {
    for (int i = 0; i < var_count; i++) {
        if (strcmp(variables[i].name, name) == 0) {
            return variables[i].value;
        }
    }
    yyerror("Undefined Variable");
    return 0;
}

int yyerror(const char *s) {
    fprintf(stderr, "ERROR: %s\n", s);
    return 0;
}

int main() {
    printf("Enter math:\n");
    return yyparse();
}
